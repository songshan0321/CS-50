1.  standard input
2.  You can fill up exactly the amount of space you want in a file which is good for things like bitmap headers.
3.  BYTE = 8-bit, DWORD = 32-bit, LONG = 32-bit, WORD = 16-bit
4.  Hex:    0x424d
    ASCII:  BM (bitmap!)
    This value is stored in "bfType".
5.  bfSize is the total number of bytes in the file (246 for smiley.bmp).
    biSize is the number of bytes in the info header (40 for a bitmap).
6.  For uncompressed RGB bitmaps, if biHeight is positive, the bitmap is a bottom- up DIB with the origin at the lower left corner. If biHeight is
    negative, the bitmap is a top-down DIB with the origin at the upper left corner.
7.  biBitCount.
8.  If it can't find the file, it will return NULL.
9.  Because it specifies how many elements you want to read, and we're always reading a struct so we only need 1 struct.
10. The padding would be 3, because 3 pixels * 3 bytes per pixel + 3 padding = 12, which is a multiple of 4.
11. It moves to a specific location in a file.
12. An integer constant which, when used as the 'whence' argument to the fseek or fseeko function, specifies that the offset provided is relative
    to the current file position.
